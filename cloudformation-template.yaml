AWSTemplateFormatVersion: '2010-09-09'
Description: 'Emma Invitation WhatsApp Lambda Function'

Parameters:
  WhatsAppPhoneNumber:
    Type: String
    Description: 'WhatsApp phone number (without + sign)'
    Default: 'myphonenumber'

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  # Store phone number securely in Parameter Store
  WhatsAppPhoneParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /emma-invitation/whatsapp-phone
      Type: SecureString
      Value: !Ref WhatsAppPhoneNumber
      Description: 'WhatsApp phone number for Emma invitation'

  # Lambda Function
  WhatsAppLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: emma-whatsapp-handler
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
              }
              
              if event.get('httpMethod') == 'OPTIONS':
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps('OK')
                  }
              
              try:
                  phone_number = os.environ.get('WHATSAPP_PHONE')
                  
                  if not phone_number:
                      ssm = boto3.client('ssm')
                      try:
                          response = ssm.get_parameter(
                              Name='/emma-invitation/whatsapp-phone',
                              WithDecryption=True
                          )
                          phone_number = response['Parameter']['Value']
                      except ClientError as e:
                          print(f"Error getting parameter: {e}")
                  
                  if not phone_number:
                      return {
                          'statusCode': 500,
                          'headers': headers,
                          'body': json.dumps({'error': 'Phone number not configured'})
                      }
                  
                  action = event.get('queryStringParameters', {}).get('action', 'yes') if event.get('queryStringParameters') else 'yes'
                  
                  messages = {
                      'yes': "Ciao! SarÃ² presente al battesimo di Emma il 21 Settembre 2025. Grazie per l'invito! ðŸŽ‰",
                      'no': "Ciao! Purtroppo non potrÃ² essere presente al battesimo di Emma. Mi dispiace molto! ðŸ˜”"
                  }
                  
                  whatsapp_url = f"https://wa.me/{phone_number}?text={messages.get(action, messages['yes'])}"
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'whatsappUrl': whatsapp_url,
                          'message': messages.get(action, messages['yes'])
                      })
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': 'Internal server error'})
                  }
      Environment:
        Variables:
          WHATSAPP_PHONE: !Ref WhatsAppPhoneNumber

  # API Gateway
  WhatsAppApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: emma-whatsapp-api
      Description: API for Emma invitation WhatsApp handler

  # API Gateway Resource
  WhatsAppResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WhatsAppApi
      ParentId: !GetAtt WhatsAppApi.RootResourceId
      PathPart: whatsapp

  # API Gateway Method
  WhatsAppMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WhatsAppApi
      ResourceId: !Ref WhatsAppResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WhatsAppLambdaFunction.Arn}/invocations

  # OPTIONS method for CORS
  WhatsAppOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WhatsAppApi
      ResourceId: !Ref WhatsAppResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WhatsAppLambdaFunction.Arn}/invocations

  # API Gateway Deployment
  WhatsAppDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WhatsAppMethod
      - WhatsAppOptionsMethod
    Properties:
      RestApiId: !Ref WhatsAppApi
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WhatsAppLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WhatsAppApi}/*/*

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${WhatsAppApi}.execute-api.${AWS::Region}.amazonaws.com/prod/whatsapp'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'
  
  LambdaFunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt WhatsAppLambdaFunction.Arn
